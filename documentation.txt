//// ---- virtual mashine ---- ////

src, dst, reg == register

len == byte (0 - 255)

> == todo

none = null

32 bit instructions

0   [null] (do nothing)                 {}

1   add [add] // pop = 2, push = 1
2   sub [subtract] // pop = 2 (top -> bottom){second, first}, push = 1

3   str [store] {size [1 - 8]} // pop = 1
4   ld [load] {size [1 - 8]} // push = 1
5   smp [set mem ptr] // pop = 1

6   jmp [jump] // pop = 1
7   jiz [jump if zero] // pop = 2 (stack example: (top -> last)[(dest), (test)])
8   jnz [jump if not zero] // pop = 2 (stack example: (top -> last)[(dest), (test)])

9   mov [pop stack to register] {dst} // pop = 1
10  psh [push value from register to stack] {reg} // push = 1

11  db [define byte] {len}
12	pv [push value] (!! always 8 bytes) (val)
13	pi [push index(pc)]

14  spm [set pin mode] // pop = 1 (0 = read, 1 = write)
15  spp [set pin ptr] // pop = 1
16  rpv [read pin value] // push = 1
17  wpv [write pin value] // pop = 1

18  nth [init another thread] // pop = 2 (top -> last){thread, starting point}
19  sth [stop a thread] // pop = 1

255	hlt [halt]

//// ---- assambler ---- ////

constants:
. <= calculated programm counter

variable acces:
//(0=priv, 1=pub)

$[var] <= acces to intern variable
#[pub] <= acces to public variable

commands:
var [name] [value (constants/intiger)]

parameter:
//-af = take further arguments/files from an includefile
// -a = append already compiled file
// -pub = append public variables to the programm

-f = fuse every given file (except the output filename) together (!! ORDER IMPORTANT)
-o = output filename (default output.vbin)
